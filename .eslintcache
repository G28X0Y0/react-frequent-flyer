[{"/Users/pedroplopez/Developer/lopez/cvs/devsecops-bdd-react/src/index.tsx":"1","/Users/pedroplopez/Developer/lopez/cvs/devsecops-bdd-react/src/reportWebVitals.ts":"2","/Users/pedroplopez/Developer/lopez/cvs/devsecops-bdd-react/src/App.tsx":"3","/Users/pedroplopez/Developer/lopez/cvs/devsecops-bdd-react/src/service/ff-club-service.ts":"4","/Users/pedroplopez/Developer/lopez/cvs/devsecops-bdd-react/src/model/frequent-flyer-model.ts":"5","/Users/pedroplopez/Developer/lopez/cvs/devsecops-bdd-react/src/components/welcome.tsx":"6"},{"size":500,"mtime":1611702352749,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1611702352750,"results":"9","hashOfConfig":"8"},{"size":5054,"mtime":1611933786943,"results":"10","hashOfConfig":"8"},{"size":2263,"mtime":1611972294709,"results":"11","hashOfConfig":"8"},{"size":413,"mtime":1611004745852,"results":"12","hashOfConfig":"8"},{"size":517,"mtime":1611798004654,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1hvcydz",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/pedroplopez/Developer/lopez/cvs/devsecops-bdd-react/src/index.tsx",[],["28","29"],"/Users/pedroplopez/Developer/lopez/cvs/devsecops-bdd-react/src/reportWebVitals.ts",[],"/Users/pedroplopez/Developer/lopez/cvs/devsecops-bdd-react/src/App.tsx",["30","31","32"],"import React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport './App.css';\nimport Welcome from './components/welcome';\nimport { FrequentFlyerClubService } from './service/ff-club-service';\n\ntype Inputs = {\n  firstName: string,\n  lastName: string,\n};\nconst ffcService = new FrequentFlyerClubService();\n\nfunction App() {\n  return (\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/edit\">Edit</Link>\n            </li>\n          </ul>\n\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/edit\">\n              <Edit />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n  );\n}\nfunction Home() {\n  const { register, handleSubmit, watch, errors } = useForm<Inputs>();\n  const [id, setId] = useState(-1)\n\n  const onSubmit = (data: any) => {\n   setId(ffcService.addToClub({ firstName: data.firstName, lastName: data.lastName }));\n  };\n\n  // console.log('FirstName= ', watch(\"firstName\")); // watch input value by passing the name of it\n  // console.log('LastName=', watch(\"lastName\")); // watch input value by passing the name of it\n\n  return (\n    <div className={'card'}>\n      <h1>Flying High Airlines</h1>\n      <h2> Frequent Flyer Club</h2>\n      <p className={'note'}>Create New Member</p>\n      <div className={'visual'}>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <div className={'field'}>\n            <label id={'first-name-label'}>First Name</label>\n            <input\n                type=\"text\"\n                name=\"firstName\"\n                defaultValue=\"\" ref={register({ required: true })}\n                aria-labelledby={'first-name-label'}\n            />\n          </div>\n\n          <div className={'field'}>\n            <label id={'last-name-label'}>Last Name</label>\n            <input\n                type=\"text\"\n                name=\"lastName\"\n                ref={register({ required: true })}\n                aria-labelledby={'last-name-label'}\n            />\n          </div>\n          {errors.firstName && <div className={'error'}>First Name is required</div>}\n          {errors.lastName && <div className={'error'}>Last Name is required</div>}\n\n          <div className={'submitContainer'}><button type=\"submit\">Save</button></div>\n        </form>\n        <Welcome id={id} service={ffcService}/>\n      </div>\n    </div>\n  );\n}\n\nfunction Edit() {\n  const m = ffcService.getMemberDetails();\n  const { register, handleSubmit, watch, errors } = useForm<Inputs>();\n  const [id, setId] = useState(ffcService.getMemberId())\n\n  const onSubmit = (data: any) => {\n    ffcService.updateClubMember({\n      firstName: data.firstName,\n      lastName: data.lastName,\n      points: data.points,\n      status: data.status\n    });\n  };\n\n  return (\n      <div className={'card'}>\n        <h1>Flying High Airlines</h1>\n        <h2> Frequent Flyer Club</h2>\n        <p className={'note'}>Edit New Member</p>\n        <div className={'visual bigger'}>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <div className={'field'}>\n              <label id={'first-name-label'}>First Name</label>\n              <input\n                  type=\"text\"\n                  name=\"firstName\"\n                  defaultValue={m.firstName}\n                  ref={register({ required: true })}\n                  aria-labelledby={'first-name-label'}\n              />\n            </div>\n\n            <div className={'field'}>\n              <label id={'last-name-label'}>Last Name</label>\n              <input\n                  type=\"text\"\n                  name=\"lastName\"\n                  defaultValue={m.lastName}\n                  ref={register({ required: true })}\n                  aria-labelledby={'last-name-label'}\n              />\n            </div>\n\n            <div className={'field'}>\n              <label id={'points-label'}>Points</label>\n              <input\n                  type=\"text\"\n                  name=\"points\"\n                  defaultValue={m.points}\n                  ref={register()}\n                  aria-labelledby={'points-label'}\n              />\n            </div>\n\n            <div className={'field'}>\n              <label id={'status-label'}>Status</label>\n              <input\n                  type=\"text\"\n                  name=\"status\"\n                  defaultValue={m.status}\n                  ref={register()}\n                  aria-labelledby={'status-label'}\n              />\n            </div>\n\n            {errors.firstName && <div className={'error'}>First Name is required</div>}\n            {errors.lastName && <div className={'error'}>Last Name is required</div>}\n\n            <div className={'submitContainer'}><button type=\"submit\">Save</button></div>\n          </form>\n          <Welcome id={id} service={ffcService}/>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","/Users/pedroplopez/Developer/lopez/cvs/devsecops-bdd-react/src/service/ff-club-service.ts",[],"/Users/pedroplopez/Developer/lopez/cvs/devsecops-bdd-react/src/model/frequent-flyer-model.ts",[],"/Users/pedroplopez/Developer/lopez/cvs/devsecops-bdd-react/src/components/welcome.tsx",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":41,"column":35,"nodeType":"39","messageId":"40","endLine":41,"endColumn":40},{"ruleId":"37","severity":1,"message":"38","line":90,"column":35,"nodeType":"39","messageId":"40","endLine":90,"endColumn":40},{"ruleId":"37","severity":1,"message":"41","line":91,"column":14,"nodeType":"39","messageId":"40","endLine":91,"endColumn":19},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"@typescript-eslint/no-unused-vars","'watch' is assigned a value but never used.","Identifier","unusedVar","'setId' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]